@using Microsoft.CST.OAT.Utils;

<form id="@id">
    @foreach (var e in Enum.GetValues(Helpers.GetValueByPropertyOrFieldName(Object, SubPath).GetType()))
    {
        if (e is Enum enuM){
            <input type="checkbox" value="@e" id="@e" @onchange="eventArgs => { CheckboxClicked(enuM, eventArgs.Value); }" /><label for="@e">@e</label><br />
        }
}
</form>
@code {
        [Parameter]
        public object Object { get; set; }

        [Parameter]
        public string SubPath { get; set; }

        [Parameter]
        public string id { get; set; }

        Type type;

    protected override void OnInitialized()
    {
        type = Helpers.GetValueByPropertyOrFieldName(Object, SubPath).GetType();
        base.OnInitialized();
    }

    void CheckboxClicked(Enum enumValue, object checkedValue)
    {
        if ((bool)checkedValue)
        {
                    if (SubProperty.GetType().IsDefined(typeof(FlagsAttribute), false))
                    {
                        if (!SubProperty.HasFlag(enumValue))
                        {
                            object val = Convert.ChangeType(SubProperty, SubProperty.GetTypeCode());
                            object val2 = Convert.ChangeType(enumValue, enumValue.GetTypeCode());
                            if (val is int)
                            {
                                SubProperty = (Enum)Convert.ChangeType((int)val + (int)val2, type);
                            }
                            else if (val is long)
                            {
                                SubProperty = (Enum)Convert.ChangeType((long)val + (long)val2, type);
                            }
                            else if (val is byte)
                            {
                                SubProperty = (Enum)Convert.ChangeType((byte)val + (byte)val2, type);
                            }
                            else if (val is sbyte)
                            {
                                SubProperty = (Enum)Convert.ChangeType((sbyte)val + (sbyte)val2, type);
                            }
                            else if (val is short)
                            {
                                SubProperty = (Enum)Convert.ChangeType((short)val + (short)val2, type);
                            }
                            else if (val is ushort)
                            {
                                SubProperty = (Enum)Convert.ChangeType((ushort)val + (ushort)val2, type);
                            }
                            else if (val is uint)
                            {
                                SubProperty = (Enum)Convert.ChangeType((uint)val + (uint)val2, type);
                            }
                            else if (val is ulong)
                            {
                                SubProperty = (Enum)Convert.ChangeType((ulong)val + (ulong)val2, type);
                            }
                        }
                    }
        }
        else
        {
                    if (SubProperty.GetType().IsDefined(typeof(FlagsAttribute), false))
                    {
                        if (SubProperty.HasFlag(enumValue))
                        {
                            object val = Convert.ChangeType(SubProperty, SubProperty.GetTypeCode());
                            object val2 = Convert.ChangeType(enumValue, enumValue.GetTypeCode());
                            if (val is int)
                            {
                                SubProperty = (Enum)Convert.ChangeType((int)val - (int)val2, type);
                            }
                            else if (val is long)
                            {
                                SubProperty = (Enum)Convert.ChangeType((long)val - (long)val2, type);
                            }
                            else if (val is byte)
                            {
                                SubProperty = (Enum)Convert.ChangeType((byte)val - (byte)val2, type);
                            }
                            else if (val is sbyte)
                            {
                                SubProperty = (Enum)Convert.ChangeType((sbyte)val - (sbyte)val2, type);
                            }
                            else if (val is short)
                            {
                                SubProperty = (Enum)Convert.ChangeType((short)val - (short)val2, type);
                            }
                            else if (val is ushort)
                            {
                                SubProperty = (Enum)Convert.ChangeType((ushort)val - (ushort)val2, type);
                            }
                            else if (val is uint)
                            {
                                SubProperty = (Enum)Convert.ChangeType((uint)val - (uint)val2, type);
                            }
                            else if (val is ulong)
                            {
                                SubProperty = (Enum)Convert.ChangeType((ulong)val - (ulong)val2, type);
                            }
                        }
                    }
             
        }
    }

    public Enum SubProperty
    {
        get
        {
            return (Enum)Helpers.GetValueByPropertyOrFieldName(Object, SubPath);
        }
        set
        {
            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, value);
        }
    }
}