@using Microsoft.CST.OAT.Utils;

<form id="@id">
    @foreach (var e in Enum.GetValues(Helpers.GetValueByPropertyOrFieldName(Object, SubPath).GetType()))
    {
        if (e is Enum enuM)
        {
            if (((Enum)Helpers.GetValueByPropertyOrFieldName(Object, SubPath)).HasFlag(enuM))
            {
                <input type="checkbox" checked="checked" value="@e" id="@e" @onchange="eventArgs => { CheckboxClicked(enuM, eventArgs.Value); }" /><label for="@e">@e</label><br />
            }
            else
            {
                <input type="checkbox" value="@e" id="@e" @onchange="eventArgs => { CheckboxClicked(enuM, eventArgs.Value); }" /><label for="@e">@e</label><br />
            }
        }
    }
</form>
@code {
    [Parameter]
    public object Object { get; set; }

    [Parameter]
    public string SubPath { get; set; }

    [Parameter]
    public string id { get; set; }

    Type type;

    protected override void OnInitialized()
    {
        type = Helpers.GetValueByPropertyOrFieldName(Object, SubPath).GetType();
        base.OnInitialized();
    }

    void CheckboxClicked(Enum enumValue, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (SubProperty.GetType().IsDefined(typeof(FlagsAttribute), false))
            {
                if (!SubProperty.HasFlag(enumValue))
                {
                    object val = Convert.ChangeType(SubProperty, SubProperty.GetTypeCode());
                    object val2 = Convert.ChangeType(enumValue, enumValue.GetTypeCode());
                    if (val is int)
                    {
                        SubProperty = (Enum)Enum.ToObject(type,(int)val + (int)val2);
                    }
                    else if (val is long)
                    {
                        SubProperty = (Enum)Enum.ToObject(type, (long)val + (long)val2);
                    }
                    else if (val is byte)
                    {
                        SubProperty = (Enum)Enum.ToObject(type, (byte)val + (byte)val2);
                    }
                    else if (val is sbyte)
                    {
                        SubProperty = (Enum)Enum.ToObject(type, (sbyte)val + (sbyte)val2);
                    }
                    else if (val is short)
                    {
                        SubProperty = (Enum)Enum.ToObject(type, (short)val + (short)val2);
                    }
                    else if (val is ushort)
                    {
                        SubProperty = (Enum)Enum.ToObject(type, (ushort)val + (ushort)val2);
                    }
                    else if (val is uint)
                    {
                        SubProperty = (Enum)Enum.ToObject(type, (uint)val + (uint)val2);
                    }
                    else if (val is ulong)
                    {
                        SubProperty = (Enum)Enum.ToObject(type, (ulong)val + (ulong)val2);
                    }
                }
            }
        }
        else
        {
            if (SubProperty.GetType().IsDefined(typeof(FlagsAttribute), false))
            {
                if (SubProperty.HasFlag(enumValue))
                {
                    object val = Convert.ChangeType(SubProperty, SubProperty.GetTypeCode());
                    object val2 = Convert.ChangeType(enumValue, enumValue.GetTypeCode());
                    if (val is int)
                    {
                        SubProperty = (Enum)Enum.ToObject(type, (int)val + (int)val2);
                    }
                    else if (val is long)
                    {
                        SubProperty = (Enum)Enum.ToObject(type, (long)val + (long)val2);
                    }
                    else if (val is byte)
                    {
                        SubProperty = (Enum)Enum.ToObject(type, (byte)val + (byte)val2);
                    }
                    else if (val is sbyte)
                    {
                        SubProperty = (Enum)Enum.ToObject(type, (sbyte)val + (sbyte)val2);
                    }
                    else if (val is short)
                    {
                        SubProperty = (Enum)Enum.ToObject(type, (short)val + (short)val2);
                    }
                    else if (val is ushort)
                    {
                        SubProperty = (Enum)Enum.ToObject(type, (ushort)val + (ushort)val2);
                    }
                    else if (val is uint)
                    {
                        SubProperty = (Enum)Enum.ToObject(type, (uint)val + (uint)val2);
                    }
                    else if (val is ulong)
                    {
                        SubProperty = (Enum)Enum.ToObject(type, (ulong)val + (ulong)val2);
                    }
                }
            }
        }
    }

    public Enum SubProperty
    {
        get
        {
            return (Enum)Helpers.GetValueByPropertyOrFieldName(Object, SubPath);
        }
        set
        {
            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, value);
        }
    }
}