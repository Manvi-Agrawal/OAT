@using Microsoft.CST.OAT.Utils;
@using System.Reflection;
@using Microsoft.CST.OAT.VehicleDemo;
@switch (CollapsedState)
{
    case ComponentCollapsedState.Expanded:
        <button @onclick="Collapse">Collapse</button>
        <tbody>
            <tr>
                <td>
                    <label for="ruleName">Name:</label>
                </td>
                <td>
                    <StringInput id="ruleName" Object="Rule" SubPath="Name" />
                </td>
            </tr>
            <tr>
                <td>
                    <label for="ruleDescription">Description:</label>
                </td>
                <td>
                    <StringInput id="ruleDescription" Object="Rule" SubPath="Description" />
                </td>
            </tr>
            <tr>
                <td>
                    <label for="ruleExpression">Expression:</label>
                </td>
                <td>
                    <StringInput id="ruleExpression" Object="Rule" SubPath="Expression" />
                </td>
            </tr>
            <tr>
                <td>
                    <label for="ruleTarget">Target:</label>
                </td>
                @if (Types.Any())
                {
                    <td>
                        <TypesInput id="ruleTarget" Object="Rule" SubPath="Target" Types="@Types" />
                    </td>
                }
                else
                {
                    <td>
                        <StringInput id="ruleTarget" Object="Rule" SubPath="Target" />
                    </td>
                }
            </tr>
            <tr>
                <td>
                    <label for="ruleSeverity">Severity:</label>
                </td>
                <td>
                    <IntInput id="ruleSeverity" Object="Rule" SubPath="Severity" />
                </td>
            </tr>
        </tbody>
        <br />
        <button @onclick="AddClause">Add Clause</button>
        <button @onclick="RemoveLastClause">Remove Last Clause</button>
        <br />
        @for (var i = 0; i < Rule.Clauses.Count; i++)
        {
            <ClauseInput Rule="@Rule" Clause="@i" />
        }
        break;
    case ComponentCollapsedState.Collapsed:
        <br />
        <span>@Rule.Name</span>
        <button @onclick="Expand">Expand</button>
        <br />
        break;
}

@code {
    [Parameter]
    public Type[] Types { get; set; } = Array.Empty<Type>();

    void Expand(EventArgs eventArgs)
    {
        CollapsedState = ComponentCollapsedState.Expanded;
    }

    void Collapse(EventArgs eventArgs)
    {
        CollapsedState = ComponentCollapsedState.Collapsed;
    }

    [Parameter]
    public ComponentCollapsedState CollapsedState { get; set; } = ComponentCollapsedState.Collapsed;

    [Parameter]
    public Rule Rule { get; set; }

    void RemoveLastClause()
    {
        Rule.Clauses.RemoveAt(Rule.Clauses.Count - 1);
    }

    void AddClause()
    {
        Rule.Clauses.Add(new Clause(Operation.Regex));
    }
}