@page "/demoauthor"
@inject Microsoft.CST.OAT.Blazor.AppState AppState;

<br />
<button @onclick="AddRule">Add Rule</button>
<button @onclick="RemoveLastRule">Remove Last Rule</button>
<button @onclick="ValidateRules">Validate Rules</button>
<br/>
@foreach (var rule in AppState.DemoRules)
{
    <div class="card">
        @foreach (var problem in issues[rule])
        {
            <div class="problem">
                <span class="oi oi-warning"></span>
                @problem.Description
            </div>
        }
        @if (issues[rule].Count() > 0) {
            <br />
        } 
        <RuleInput Rule="rule" CollapsedState="ComponentCollapsedState.Collapsed" Types="GetTypes()" />
    </div>
}

@code{
    System.Reflection.Assembly assembly = typeof(VehicleDemo.Vehicle).Assembly;
    string nameSpace = "Microsoft.CST.OAT.VehicleDemo";
    Type[] GetTypes()
    {
        return Helpers.GetTypesInNamespace(assembly, nameSpace);
    }

    Analyzer analyzer = new Analyzer(new AnalyzerOptions(true));

    protected override void OnInitialized()
    {
        Strings.Setup();
        analyzer.SetOperation(new Microsoft.CST.OAT.VehicleDemo.OverweightOperation(analyzer));
        ValidateRules();
        base.OnInitialized();
    }

    Dictionary<Rule, IEnumerable<Violation>> issues = new Dictionary<Rule, IEnumerable<Violation>>();

    void ValidateRules()
    {
        foreach (var rule in AppState.DemoRules)
        {
            issues[rule] = analyzer.EnumerateRuleIssues(rule);
        }
    }

    void RemoveLastRule()
    {
        AppState.DemoRules.RemoveAt(AppState.DemoRules.Count - 1);
        ValidateRules();
    }

    void AddRule()
    {
        AppState.DemoRules.Add(new Rule("Rule Name Here"));
        ValidateRules();
    }
}